
# validation

- name: assert all vars are set
  assert: { that: "{{ item }} != '' " }
  with_items:
  - app_name
  - clear_temp_folder
  - service_name
  - main_class
  - installation_folder
  - clear_before_install
  - server_port
  - jmx_port
  - service_file_path
  - installer_file_name
  - ansible_user_id
  - s3_download_url
  - launcher_file_name
  - application_properties
  - extra_java_options  

# required dependencies

- name: download dependencies from internet
  block:

    - name: make sure epel-release is installed
      yum:
        name: epel-release
        state: present
        lock_timeout: 180
      become: yes
    
    - name: make sure rsync is installed
      yum:
        name: rsync
        state: present
        lock_timeout: 180
      become: yes
    
    - name: make sure unzip is installed
      yum:
        name: unzip
        state: present
        lock_timeout: 180
      become: yes

    - name: Add nginx repository
      yum_repository:
        name: nginx
        description: Nginx YUM repo
        baseurl: http://nginx.org/packages/mainline/centos/$releasever/$basearch/
        gpgkey: https://nginx.org/keys/nginx_signing.key
        gpgcheck: yes
        enabled: yes
        state: present
      become: yes

    - name: make sure nginx 1.16.1 is installed
      yum:
        name: nginx-1.16.1
        state: present
        lock_timeout: 180
      become: yes
    
    - name: make sure psmisc (killall) is installed
      yum:
        name: psmisc
        state: present
        lock_timeout: 180
      become: yes

  when: deployment_mode == "online"

- name: download dependencies from shared storage folder
  block:

    - name: copy common packages folder from shared storage folder
      copy:
        src: "{{ shared_storage_folder }}/prereq_linux_common"
        dest: "{{ temp_folder }}/"
        remote_src: no

    - name: get the list of rpm packages
      find:
        path: "{{ temp_folder }}/prereq_linux_common"
        pattern: "*.rpm"
        file_type: file
      register: rpm_packages
    
    - name: make sure unzip, rsync and psmisc is installed
      yum:
        name: "{{ item.path }}"
        state: present
      with_items:
        - "{{ rpm_packages.files }}"
      
    - name: copy nginx packages folder from shared storage folder
      copy:
        src: "{{ shared_storage_folder }}/prereq_linux_nginx"
        dest: "{{ temp_folder }}/"
        remote_src: no

    - name: get the list of nginx rpm packages
      find:
        path: "{{ temp_folder }}/prereq_linux_nginx"
        pattern: "*.rpm"
        file_type: file
      register: rpm_nginx
    
    - name: make sure nginx is installed
      yum:
        name: "{{ item.path }}"
        state: present
      with_items:
        - "{{ rpm_nginx.files }}"

  when: deployment_mode == "offline"

# disable selinux and firewalld

- name: disable selinux
  selinux:
    state: disabled
  become: yes
   
- name: stop and disable firewall     # ? need to discuss on disabling firewall service ?
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  become: yes
  ignore_errors: yes
  with_items:
    - firewalld

# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# required java dependency

- name: make sure java is installed on the machine
  command: "{{ java_bin }} -version"
  register: java_test
  become: yes
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# download the file

- name: download zip from internet
  block:

    - name: download zip from s3 url
      get_url:
        url: "{{ s3_download_url }}"
        dest: "{{ temp_folder }}/{{ installer_file_name }}"
        timeout: "{{ download_timeout | default(60) }}"
      when: custom_download_url == ""
    
    - name: download zip from custom url
      get_url:
        url: "{{ custom_download_url }}"
        dest: "{{ temp_folder }}/{{ installer_file_name }}"
        timeout: "{{ download_timeout | default(60) }}"
      when: custom_download_url != ""

  when: deployment_mode == "online"

- name: download zip from shared storage folder
  copy:
    src: "{{ shared_storage_folder }}/{{ relative_path }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    remote_src: no
  when: deployment_mode == "offline"

# stop old service

- name: stop the old service
  systemd:
    name: "{{ service_name }}"
    state: stopped
  ignore_errors: yes
  become: yes

- name: stop the nginx service
  systemd:
    name: nginx
    state: stopped
  ignore_errors: yes
  become: yes

- name: kill nginx processes
  shell: |
    killall nginx
  register: killnginxresult
  changed_when: killnginxresult.rc == 0
  failed_when: killnginxresult.rc != 0 and killnginxresult.rc != 1
  become: yes
  
# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack and copy all the files to the installation folder

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure unzip folder exist
  file:
    path: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: unzip the file
  unarchive:
    src: "{{ temp_folder }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}"
    owner: "{{ ansible_user_id }}"
  become: yes

- name: synchronize zip content to installation folder
  command: "rsync -r {{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}/ {{ installation_folder }}/"
  become: yes
  notify:
    - start the service

- name: copy service file
  template:
    src: systemd.service.j2
    dest: "{{ service_file_path }}"
  become: yes

- name: copy start script
  template:
    src: start.sh.j2
    dest: "{{ installation_folder }}/{{ launcher_file_name }}"
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

# configure installed 

- name: update application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update logback properties file
  lineinfile:
    path: "{{ installation_folder }}/config/logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: update nginx property to application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ nginx_application_properties }}"
  become: yes

- name: set permissions for logs folder
  file:
    path: "{{ installation_folder }}/logs"
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

- name: create nginx user
  user:
    name: "{{ nginx_user }}"
    comment: Nginx web server
    system: yes
    create_home: no
    home: /var/lib/nginx
    shell: /sbin/nologin
    state: present
  become: yes

# need to check if permission required for nginx logs
- name: update permissions for nginx logs folder
  file:
    path: "{{ nginx_logs }}"
    state: directory
    mode: 0777
    recurse: yes
    owner: "{{ nginx_user }}"
  become: yes


- name: update permissions for /var/lib/nginx folder
  file:
    path: /var/lib/nginx 
    state: directory
    mode: '0777'
    recurse: yes
    owner: "{{ nginx_user }}"
  become: yes

- name: reset pairing key
  file:
    path: "{{ installation_folder }}/config/{{ pairing_file_name }}"
    state: absent
  become: yes

# remove vmoptions file

- name: check vmoptions files to remove
  find:
    paths: "{{ installation_folder }}"
    file_type: file
    patterns: "*.vmoptions"
  register: delete_vmoptions
  become: yes

- name: remove vmoptions files from installation folder
  file:
    path: "{{ item.path }}"
    state: absent
  become: yes
  with_items:
    - "{{ delete_vmoptions.files }}"

# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      server_port: "{{ server_port }}"
      jmx_port: "{{ jmx_port }}"
      installation_folder: "{{ installation_folder }}"
      configuration_file: "{{ installation_folder }}/config/application.properties"
      java_bin: "{{ java_bin }}"
      service_name: "{{ service_name }}"
