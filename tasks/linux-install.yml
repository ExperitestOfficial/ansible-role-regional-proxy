
# validation

- name: assert all vars are set
  assert: 
    that: "{{ item }} != '' " 
    quiet: true
  with_items:
  - app_name
  - clear_temp_folder
  - service_name
  - main_class
  - installation_folder
  - clear_before_install
  - server_port
  - service_file_path
  - installer_file_name
  - ansible_user_id
  - s3_download_url
  - launcher_file_name
  - application_properties
  - extra_java_options  
  - logs_folder

# vaidate nginx certificates
- name: validate nginx server certificates 
  block:
    
    - name: check if server private key file exists to copy
      stat:
        path: "{{ certificate_folder | default('files') }}/server_private_key.key"
      delegate_to: localhost
      register: server_key_file
    
    - name: check if server public certificate file exists to copy
      stat:
        path: "{{ certificate_folder | default('files') }}/server_public_key.crt"
      delegate_to: localhost
      register: server_cert_file
    
    - name: fail if certificates are not found
      fail:
        msg: "nginx server certificates not found in path {{ certificate_folder | default('files') }}"
      when: (not server_key_file.stat.exists) or (not server_cert_file.stat.exists) 

  when: nginx_certificate_install == True

# required dependencies

- name: make sure epel-release is installed
  yum:
    name: epel-release
    state: present
    lock_timeout: 180
  become: yes

- name: make sure rsync is installed
  yum:
    name: rsync
    state: present
    lock_timeout: 180
  become: yes

- name: make sure unzip is installed
  yum:
    name: unzip
    state: present
    lock_timeout: 180
  become: yes

# TODO: All repos are managed from foreman. 
# - name: Add nginx repository
#   yum_repository:
#     name: nginx
#     description: Nginx YUM repo
#     baseurl: http://nginx.org/packages/mainline/centos/$releasever/$basearch/
#     gpgkey: https://nginx.org/keys/nginx_signing.key
#     gpgcheck: yes
#     enabled: yes
#     state: present
#   become: yes

- name: "make sure nginx {{ nginx_version }} is installed"
  yum:
    name: "nginx-{{ nginx_version }}"
    state: present
    lock_timeout: 180
  become: yes

- name: make sure psmisc (killall) is installed
  yum:
    name: psmisc
    state: present
    lock_timeout: 180
  become: yes

# disable selinux and firewalld

- name: disable selinux
  selinux:
    state: disabled
  become: yes
   
- name: stop and disable firewall     # ? need to discuss on disabling firewall service ?
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  become: yes
  ignore_errors: yes
  with_items:
    - firewalld

# set temp folder

- name: make sure temp folder
  file:
    path: "{{ temp_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

# required java dependency

- name: make sure java is installed on the machine
  command: "{{ java_bin }} -version"
  register: java_test
  become: yes
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: "java must be accesible in path {{ java_bin }}"
  when: java_test.rc != 0

# download the file

- name: download zip from s3 url
  get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url == ""

- name: download zip from custom url
  get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}/{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
  when: custom_download_url != ""

# delete old installation (optional)

- name: clear old installation folder
  file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True

# unpack and copy all the files to the installation folder

- name: make sure installation folder exists
  file:
    path: "{{ installation_folder }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: make sure unzip folder exist
  file:
    path: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    state: directory
    owner: "{{ ansible_user_id }}"
  become: yes

- name: unzip the file
  unarchive:
    src: "{{ temp_folder }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}"
    owner: "{{ ansible_user_id }}"
  become: yes

- name: synchronize zip content to installation folder
  command: "rsync -r {{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/{{ convention }}/ {{ installation_folder }}/"
  become: yes

# configure installed 

- name: update application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ application_properties }}"
  become: yes

- name: update logback properties file
  lineinfile:
    path: "{{ installation_folder }}/config/logback.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ logback_properties }}"
  become: yes

- name: update nginx property to application properties file
  lineinfile:
    path: "{{ installation_folder }}/config/application.properties"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ nginx_application_properties }}"
  become: yes

- name: make sure logs folder exists
  file:
    path: "{{ logs_folder }}"
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
  become: yes

- name: remove existing logs folder from installation folder
  file:
    path: "{{ installation_folder }}/logs"
    state: absent
  become: yes

- name: create nginx user
  user:
    name: "{{ nginx_user }}"
    comment: Nginx web server
    system: yes
    create_home: no
    home: /var/lib/nginx
    shell: /sbin/nologin
    state: present
  become: yes

# need to check if permission required for nginx logs
- name: update permissions for nginx logs folder
  file:
    path: "{{ nginx_logs }}"
    state: directory
    mode: 0777
    recurse: yes
    owner: "{{ nginx_user }}"
  become: yes


- name: update permissions for /var/lib/nginx folder
  file:
    path: /var/lib/nginx 
    state: directory
    mode: '0777'
    recurse: yes
    owner: "{{ nginx_user }}"
  become: yes

- name: reset pairing key
  file:
    path: "{{ installation_folder }}/config/{{ pairing_file_name }}"
    state: absent
  become: yes

# remove vmoptions file

- name: check vmoptions files to remove
  find:
    paths: "{{ installation_folder }}"
    file_type: file
    patterns: "*.vmoptions"
  register: delete_vmoptions
  become: yes

- name: remove vmoptions files from installation folder
  file:
    path: "{{ item.path }}"
    state: absent
  become: yes
  with_items:
    - "{{ delete_vmoptions.files }}"
